"""
Master Agent - Orchestrateur principal du syst√®me NIKKOTRADER V11
Utilise CrewAI pour coordonner tous les agents sp√©cialis√©s
"""

import asyncio
import json
import logging
import sys
import os
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

from crewai import Agent, Task, Crew, Process
from langchain.llms import OpenAI
from langchain.tools import BaseTool
import redis.asyncio as redis
from loguru import logger

from shared.config import AgentConfig
from shared.redis_manager import RedisManager
from shared.models import TradingSignal, AgentStatus, SystemEvent
from shared.metrics import MetricsExporter

# Import conditionnel des agents sp√©cialis√©s
try:
    from market_data_agent import MarketDataAgent
except ImportError:
    MarketDataAgent = None

@dataclass
class AgentTask:
    """Repr√©sente une t√¢che assign√©e √† un agent"""
    id: str
    agent_name: str
    task_type: str
    priority: int
    data: Dict[str, Any]
    created_at: datetime
    status: str = "pending"

class MasterAgent:
    """
    Agent Master - Orchestrateur principal du syst√®me
    Coordonne tous les agents sp√©cialis√©s et prend les d√©cisions finales
    """
    
    def __init__(self, config: AgentConfig):
        self.config = config
        self.redis_manager = RedisManager()
        self.agent_name = "MasterAgent"
        self.status = "stopped"
        self.heartbeat_interval = 30
        
        # Agents sp√©cialis√©s
        self.specialized_agents = {}
        self.active_tasks = {}
        self.signal_queue = []
        
        # M√©triques
        self.total_decisions = 0
        self.successful_decisions = 0
        self.failed_decisions = 0
        
        # Configuration CrewAI
        self.crew = None
        self.setup_crew()
        
        # Initialisation des m√©triques Prometheus
        self.metrics = MetricsExporter(self.agent_name, "master", 8080)
        
        logger.info(f"üéØ {self.agent_name} initialis√©")
    
    def setup_crew(self):
        """Configuration de l'√©quipe CrewAI"""
        
        # Agent principal de d√©cision
        decision_agent = Agent(
            role="Trading Decision Coordinator",
            goal="Coordonner les d√©cisions de trading en analysant les signaux de tous les agents sp√©cialis√©s",
            backstory="""
            Je suis l'orchestrateur principal d'un syst√®me de trading algorithmique multi-agents.
            Ma mission est de collecter les signaux de tous les agents sp√©cialis√©s,
            d'analyser leur qualit√© et leur coh√©rence, puis de prendre les d√©cisions finales
            pour maximiser les performances tout en minimisant les risques.
            """,
            verbose=True,
            allow_delegation=False
        )
        
        # Agent de gestion des risques
        risk_agent = Agent(
            role="Risk Management Specialist",
            goal="√âvaluer et filtrer les signaux selon les crit√®res de risque d√©finis",
            backstory="""
            Je suis sp√©cialis√© dans l'analyse des risques. J'√©value chaque signal
            selon les crit√®res de drawdown, corr√©lation, et exposition.
            Je peux rejeter des signaux qui ne respectent pas les limites de risque.
            """,
            verbose=True,
            allow_delegation=False
        )
        
        # Agent de performance
        performance_agent = Agent(
            role="Performance Analyst",
            goal="Analyser les performances historiques pour optimiser les d√©cisions futures",
            backstory="""
            J'analyse en continu les performances des strat√©gies et des agents.
            J'identifie les patterns de succ√®s et d'√©chec pour am√©liorer
            les crit√®res de d√©cision et l'allocation des ressources.
            """,
            verbose=True,
            allow_delegation=False
        )
        
        # Cr√©er l'√©quipe
        self.crew = Crew(
            agents=[decision_agent, risk_agent, performance_agent],
            tasks=[],  # Les t√¢ches seront ajout√©es dynamiquement
            verbose=True,
            process=Process.sequential
        )
    
    async def start(self):
        """D√©marrage du Master Agent"""
        logger.info(f"üöÄ D√©marrage du {self.agent_name}")
        
        self.status = "running"
        
        # D√©marrer le serveur de m√©triques Prometheus
        self.metrics.start_server()
        
        # Mettre √† jour le statut dans Redis
        await self.redis_manager.set_agent_status(self.agent_name, {
            "status": "running",
            "last_heartbeat": datetime.now(timezone.utc).isoformat(),
            "total_tasks": self.total_decisions,
            "successful_tasks": self.successful_decisions,
            "failed_tasks": self.failed_decisions
        })
        
        # D√©marrer les t√¢ches principales
        await asyncio.gather(
            self.heartbeat_loop(),
            self.signal_processing_loop(),
            self.agent_monitoring_loop(),
            self.decision_making_loop()
        )
    
    async def stop(self):
        """Arr√™t du Master Agent"""
        logger.info(f"üõë Arr√™t du {self.agent_name}")
        
        self.status = "stopped"
        
        # Mettre √† jour le statut dans Redis
        await self.redis_manager.set_agent_status(self.agent_name, {
            "status": "stopped",
            "last_heartbeat": datetime.now(timezone.utc).isoformat()
        })
    
    async def heartbeat_loop(self):
        """Boucle de heartbeat pour maintenir le statut de l'agent"""
        while self.status == "running":
            try:
                await self.redis_manager.set_agent_status(self.agent_name, {
                    "status": "running",
                    "last_heartbeat": datetime.now(timezone.utc).isoformat(),
                    "total_decisions": self.total_decisions,
                    "successful_decisions": self.successful_decisions,
                    "failed_decisions": self.failed_decisions
                })
                
                await asyncio.sleep(self.heartbeat_interval)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur heartbeat: {e}")
                await asyncio.sleep(10)
    
    async def signal_processing_loop(self):
        """Boucle de traitement des signaux de trading"""
        while self.status == "running":
            try:
                # Traiter les signaux en attente
                await self.process_pending_signals()
                await asyncio.sleep(1)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur traitement signaux: {e}")
                await asyncio.sleep(5)
    
    async def agent_monitoring_loop(self):
        """Boucle de surveillance des autres agents"""
        while self.status == "running":
            try:
                await self.monitor_agents_health()
                await asyncio.sleep(30)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur surveillance agents: {e}")
                await asyncio.sleep(10)
    
    async def decision_making_loop(self):
        """Boucle de prise de d√©cision principale"""
        while self.status == "running":
            try:
                await self.make_trading_decisions()
                await asyncio.sleep(5)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur prise de d√©cision: {e}")
                await asyncio.sleep(10)
    
    async def process_pending_signals(self):
        """Traiter les signaux de trading en attente"""
        try:
            # R√©cup√©rer les signaux depuis Redis
            signals = await self.redis_manager.get_pending_signals()
            
            for signal in signals:
                await self.analyze_signal(signal)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement signaux: {e}")
    
    async def analyze_signal(self, signal: Dict):
        """Analyser un signal de trading"""
        try:
            self.total_decisions += 1
            
            # Logique d'analyse du signal
            # Ici on peut ajouter des crit√®res de validation
            
            logger.info(f"üìä Signal analys√©: {signal.get('symbol', 'Unknown')}")
            self.successful_decisions += 1
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse signal: {e}")
            self.failed_decisions += 1
    
    async def monitor_agents_health(self):
        """Surveiller la sant√© des autres agents"""
        try:
            # V√©rifier le statut des agents
            agents_status = await self.redis_manager.get_all_agents_status()
            
            for agent_name, status in agents_status.items():
                if status.get("status") != "running":
                    logger.warning(f"‚ö†Ô∏è Agent {agent_name} non actif: {status.get('status')}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erreur surveillance agents: {e}")
    
    async def make_trading_decisions(self):
        """Prendre des d√©cisions de trading bas√©es sur les signaux analys√©s"""
        try:
            # Logique de d√©cision de trading
            # Ici on peut impl√©menter la logique CrewAI pour les d√©cisions complexes
            pass
            
        except Exception as e:
            logger.error(f"‚ùå Erreur prise de d√©cision trading: {e}")

# Point d'entr√©e principal avec d√©tection du type d'agent
async def main():
    """Point d'entr√©e principal - d√©tecte et lance le bon type d'agent"""
    agent_type = os.getenv("AGENT_TYPE", "master").lower()
    config = AgentConfig.from_env()
    
    logger.info(f"üéØ Lancement de l'agent type: {agent_type}")
    
    try:
        if agent_type == "market" and MarketDataAgent:
            # Lancer l'agent de donn√©es de march√©
            agent = MarketDataAgent(config)
            await agent.start()
            
        elif agent_type in ["master", "strategy", "risk", "performance", "notification"]:
            # Lancer l'agent master (pour l'instant tous utilisent le m√™me code)
            agent = MasterAgent(config)
            await agent.start()
            
        else:
            logger.error(f"‚ùå Type d'agent inconnu: {agent_type}")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("üõë Interruption clavier d√©tect√©e")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
    finally:
        if 'agent' in locals():
            await agent.stop()

if __name__ == "__main__":
    asyncio.run(main()) 