"""
Market Data Agent - Collecteur de donn√©es MT5 temps r√©el
Agent sp√©cialis√© dans la collecte de donn√©es de march√© depuis MetaTrader 5
"""

import asyncio
import os
import logging
import json
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any

# Configuration simple sans d√©pendances externes
from dataclasses import dataclass

@dataclass
class SimpleConfig:
    """Configuration simplifi√©e pour l'agent"""
    redis_url: str = "redis://redis:6379"
    agent_type: str = "market"
    
    @classmethod
    def from_env(cls):
        return cls(
            redis_url=os.getenv("REDIS_URL", "redis://redis:6379"),
            agent_type=os.getenv("AGENT_TYPE", "market")
        )

# Simulation simple de Redis Manager
class SimpleRedisManager:
    """Manager Redis simplifi√©"""
    
    def __init__(self):
        self.connected = False
    
    async def set_agent_status(self, agent_name: str, status: Dict):
        """Simuler mise √† jour statut Redis"""
        print(f"üìä Status {agent_name}: {status['status']}")
    
    async def set_market_data(self, symbol: str, data: Dict):
        """Simuler stockage donn√©es march√©"""
        print(f"üíπ {symbol}: {data['bid']}/{data['ask']} (spread: {data.get('spread_pips', 'N/A')} pips)")
    
    async def publish_market_data(self, symbol: str, data: Dict):
        """Simuler publication donn√©es"""
        pass

# Simulation simple de m√©triques
class SimpleMetrics:
    """M√©triques simplifi√©es"""
    
    def __init__(self, agent_name: str, agent_type: str, port: int):
        self.agent_name = agent_name
        print(f"üìä M√©triques {agent_name} sur port {port}")
    
    def start_server(self):
        """Simuler d√©marrage serveur m√©triques"""
        print(f"üîç Serveur m√©triques d√©marr√©")

class MarketDataAgent:
    """
    Agent de collecte de donn√©es de march√© depuis MT5
    Version simplifi√©e pour le trading sur compte d√©mo
    """
    
    def __init__(self, config: SimpleConfig):
        self.config = config
        self.redis_manager = SimpleRedisManager()
        self.agent_name = "MarketDataAgent"
        self.status = "stopped"
        
        # Configuration MT5 (simulation uniquement en Docker)
        self.mt5_login = int(os.getenv("MT5_LOGIN", "51862230"))
        self.mt5_password = os.getenv("MT5_PASSWORD", "AiMwI&gG$26Z8i")
        self.mt5_server = os.getenv("MT5_SERVER", "ICMarkets-Demo")
        self.mt5_connected = False  # Toujours False en Docker
        
        # Paires √† surveiller
        self.trading_pairs = [
            "EURUSD", "GBPUSD", "USDJPY", "USDCHF", "AUDUSD", "USDCAD", "NZDUSD",
            "EURGBP", "EURJPY", "EURCHF", "EURAUD", "EURCAD", "EURNZD",
            "GBPJPY", "GBPCHF", "GBPAUD", "GBPCAD", "GBPNZD"
        ]
        
        # √âtat interne
        self.last_prices = {}
        self.scan_interval = 5  # Secondes
        self.error_count = 0
        self.max_errors = 10
        
        # M√©triques
        self.total_scans = 0
        self.successful_scans = 0
        self.failed_scans = 0
        
        # Initialisation des m√©triques
        self.metrics = SimpleMetrics(self.agent_name, "market_data", 8080)
        
        print(f"üéØ {self.agent_name} initialis√©")
    
    async def start(self):
        """D√©marrage du Market Data Agent"""
        print(f"üöÄ D√©marrage du {self.agent_name}")
        
        self.status = "running"
        
        # D√©marrer le serveur de m√©triques
        self.metrics.start_server()
        
        print("‚ö†Ô∏è Mode simulation activ√© (MT5 non disponible en Docker)")
        
        # Mettre √† jour le statut dans Redis
        await self.redis_manager.set_agent_status(self.agent_name, {
            "status": "running",
            "last_heartbeat": datetime.now(timezone.utc).isoformat(),
            "mt5_connected": False,
            "simulation_mode": True,
            "total_scans": self.total_scans,
            "successful_scans": self.successful_scans,
            "failed_scans": self.failed_scans
        })
        
        # D√©marrer les t√¢ches principales
        await asyncio.gather(
            self.heartbeat_loop(),
            self.market_data_loop()
        )
    
    async def stop(self):
        """Arr√™t du Market Data Agent"""
        print(f"üõë Arr√™t du {self.agent_name}")
        
        self.status = "stopped"
        
        # Mettre √† jour le statut dans Redis
        await self.redis_manager.set_agent_status(self.agent_name, {
            "status": "stopped",
            "last_heartbeat": datetime.now(timezone.utc).isoformat()
        })
    
    async def heartbeat_loop(self):
        """Boucle de heartbeat pour maintenir le statut de l'agent"""
        while self.status == "running":
            try:
                await self.redis_manager.set_agent_status(self.agent_name, {
                    "status": "running",
                    "last_heartbeat": datetime.now(timezone.utc).isoformat(),
                    "mt5_connected": False,
                    "simulation_mode": True,
                    "total_scans": self.total_scans,
                    "successful_scans": self.successful_scans,
                    "error_count": self.error_count
                })
                
                await asyncio.sleep(30)  # Heartbeat toutes les 30 secondes
                
            except Exception as e:
                print(f"‚ùå Erreur heartbeat: {e}")
                await asyncio.sleep(10)
    
    async def market_data_loop(self):
        """Boucle principale de collecte des donn√©es de march√©"""
        while self.status == "running":
            try:
                await self.scan_market_data()
                await asyncio.sleep(self.scan_interval)
                
            except Exception as e:
                print(f"‚ùå Erreur scan march√©: {e}")
                self.error_count += 1
                
                if self.error_count >= self.max_errors:
                    print("üö® Trop d'erreurs - arr√™t de l'agent")
                    self.status = "error"
                    break
                
                await asyncio.sleep(10)
    
    async def scan_market_data(self):
        """Scanner les donn√©es de march√© - Mode simulation"""
        self.total_scans += 1
        
        try:
            await self.simulate_market_data()
            
        except Exception as e:
            self.failed_scans += 1
            print(f"‚ùå Erreur scan march√©: {e}")
            raise
    
    async def simulate_market_data(self):
        """Simuler des donn√©es de march√© r√©alistes"""
        import random
        
        try:
            # Prix de base simul√©s (mise √† jour 18 juillet 2025)
            base_prices = {
                "EURUSD": 1.0920, "GBPUSD": 1.2680, "USDJPY": 151.20,
                "USDCHF": 0.9180, "AUDUSD": 0.6580, "USDCAD": 1.3620,
                "NZDUSD": 0.6080, "EURGBP": 0.8610, "EURJPY": 165.10,
                "EURCHF": 0.9750, "EURAUD": 1.6580, "EURCAD": 1.4880,
                "EURNZD": 1.7960, "GBPJPY": 191.80, "GBPCHF": 1.1640
            }
            
            for symbol in self.trading_pairs[:9]:  # Simuler 9 paires principales
                if symbol in base_prices:
                    base_price = base_prices[symbol]
                    
                    # G√©n√©rer variation al√©atoire (-0.05% √† +0.05%)
                    variation = random.uniform(-0.0005, 0.0005)
                    bid = base_price * (1 + variation)
                    
                    # Spread typique selon la paire
                    if "JPY" in symbol:
                        spread_pips = random.uniform(0.8, 2.0)
                        point = 0.01
                        digits = 3
                    else:
                        spread_pips = random.uniform(0.5, 1.8)
                        point = 0.0001
                        digits = 5
                    
                    spread = spread_pips * point * 10
                    ask = bid + spread
                    
                    market_data = {
                        "symbol": symbol,
                        "timestamp": datetime.now(timezone.utc).isoformat(),
                        "bid": round(bid, digits),
                        "ask": round(ask, digits),
                        "last": round(bid, digits),
                        "volume": random.randint(50, 200),
                        "spread": round(spread, digits),
                        "spread_pips": round(spread_pips, 1),
                        "digits": digits,
                        "point": point,
                        "simulated": True,
                        "trade_allowed": True,
                        "market_hours": self.get_market_status()
                    }
                    
                    # Stocker et publier
                    await self.redis_manager.set_market_data(symbol, market_data)
                    await self.redis_manager.publish_market_data(symbol, market_data)
            
            self.successful_scans += 1
            print(f"üìä Scan simulation r√©ussi: 9 paires (scan #{self.total_scans})")
            
        except Exception as e:
            self.failed_scans += 1
            print(f"‚ùå Erreur simulation: {e}")
    
    def get_market_status(self) -> str:
        """Obtenir le statut du march√© selon l'heure"""
        current_hour = datetime.now(timezone.utc).hour
        
        if 22 <= current_hour or current_hour < 2:  # Session Asie
            return "ASIA_SESSION"
        elif 8 <= current_hour < 16:  # Session London
            return "LONDON_SESSION"
        elif 13 <= current_hour < 22:  # Session NYC (overlap)
            return "NYC_SESSION"
        else:
            return "LOW_LIQUIDITY"

# Point d'entr√©e principal
async def main():
    """Point d'entr√©e principal pour le Market Data Agent"""
    config = SimpleConfig.from_env()
    agent = MarketDataAgent(config)
    
    try:
        await agent.start()
    except KeyboardInterrupt:
        print("üõë Interruption clavier d√©tect√©e")
    except Exception as e:
        print(f"‚ùå Erreur fatale: {e}")
    finally:
        await agent.stop()

if __name__ == "__main__":
    print("üöÄ NIKKOTRADER V11.1.0 - Market Data Agent")
    print("üìä Collecteur de donn√©es de march√© (mode simulation)")
    print("="*50)
    asyncio.run(main()) 