#!/bin/bash

# Script de d√©marrage pour NIKKOTRADER V11
# Syst√®me de trading algorithmique multi-agents

set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Banner
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                    NIKKOTRADER V11                           ‚ïë"
echo "‚ïë              Syst√®me Multi-Agents de Trading                 ‚ïë"
echo "‚ïë                                                              ‚ïë"
echo "‚ïë  üöÄ D√©marrage de l'environnement de d√©veloppement           ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"

# V√©rifications pr√©alables
echo -e "${YELLOW}üìã V√©rifications pr√©alables...${NC}"

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier Docker Compose
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©${NC}"
    exit 1
fi

# V√©rifier que Docker est d√©marr√©
if ! docker info &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas d√©marr√©${NC}"
    echo -e "${YELLOW}üí° Veuillez d√©marrer Docker Desktop${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Docker est disponible et fonctionnel${NC}"

# Cr√©er les dossiers n√©cessaires
echo -e "${YELLOW}üìÅ Cr√©ation des dossiers...${NC}"
mkdir -p logs
mkdir -p data
mkdir -p monitoring/prometheus
mkdir -p monitoring/grafana/dashboards
mkdir -p monitoring/grafana/datasources

echo -e "${GREEN}‚úÖ Dossiers cr√©√©s${NC}"

# Cr√©er le fichier .env s'il n'existe pas
if [ ! -f .env ]; then
    echo -e "${YELLOW}‚öôÔ∏è Cr√©ation du fichier .env...${NC}"
    cat > .env << EOF
# NIKKOTRADER V11 Configuration

# Environnement
ENVIRONMENT=development
DEBUG=true

# Base de donn√©es
DATABASE_URL=postgresql://nikkotrader:nikkotrader123@postgres:5432/nikkotrader_v11

# Redis
REDIS_URL=redis://redis:6379

# Trading (COMPTE DEMO UNIQUEMENT)
MT5_LOGIN=51862230
MT5_PASSWORD=AiMwI&gG$26Z8i
MT5_SERVER=ICMarkets-Demo

# Telegram
TELEGRAM_BOT_TOKEN=8069695013:AAFs7M8knILYIS_NacS2QlIGUVEiZWLmlj0
TELEGRAM_CHAT_ID=-1002272137953

# S√©curit√©
SECRET_KEY=change-this-secret-key-in-production

# Forward Testing
FORWARD_TESTING_MODE=true
DEMO_ACCOUNT_ONLY=true
EOF
    echo -e "${GREEN}‚úÖ Fichier .env cr√©√©${NC}"
fi

# Fonction pour arr√™ter tous les services
cleanup() {
    echo -e "\n${YELLOW}üõë Arr√™t des services...${NC}"
    docker-compose down
    exit 0
}

# Capturer Ctrl+C
trap cleanup SIGINT

# D√©marrer les services
echo -e "${YELLOW}üöÄ D√©marrage des services...${NC}"

# Construire et d√©marrer les services
echo -e "${BLUE}üì¶ Construction des images Docker...${NC}"
docker-compose build --no-cache

echo -e "${BLUE}üîÑ D√©marrage des services...${NC}"
docker-compose up -d

# Attendre que les services soient pr√™ts
echo -e "${YELLOW}‚è≥ Attente du d√©marrage des services...${NC}"
sleep 10

# V√©rifier l'√©tat des services
echo -e "${BLUE}üîç V√©rification de l'√©tat des services...${NC}"

# V√©rifier PostgreSQL
if docker-compose exec postgres pg_isready -U nikkotrader &> /dev/null; then
    echo -e "${GREEN}‚úÖ PostgreSQL est pr√™t${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL n'est pas pr√™t${NC}"
fi

# V√©rifier Redis
if docker-compose exec redis redis-cli ping &> /dev/null; then
    echo -e "${GREEN}‚úÖ Redis est pr√™t${NC}"
else
    echo -e "${RED}‚ùå Redis n'est pas pr√™t${NC}"
fi

# V√©rifier l'API
sleep 5
if curl -s http://localhost:8000/health &> /dev/null; then
    echo -e "${GREEN}‚úÖ API Backend est pr√™te${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è API Backend en cours de d√©marrage...${NC}"
fi

# Afficher les informations de connexion
echo -e "\n${GREEN}üéâ NIKKOTRADER V11 est d√©marr√© !${NC}"
echo -e "\n${BLUE}üìä Acc√®s aux services :${NC}"
echo -e "‚Ä¢ Dashboard Frontend : ${GREEN}http://localhost:3000${NC}"
echo -e "‚Ä¢ API Backend        : ${GREEN}http://localhost:8000${NC}"
echo -e "‚Ä¢ API Documentation  : ${GREEN}http://localhost:8000/docs${NC}"
echo -e "‚Ä¢ Grafana Monitoring : ${GREEN}http://localhost:3001${NC} (admin/admin123)"
echo -e "‚Ä¢ Prometheus         : ${GREEN}http://localhost:9090${NC}"
echo -e "‚Ä¢ RabbitMQ           : ${GREEN}http://localhost:15672${NC} (nikkotrader/nikkotrader123)"

echo -e "\n${YELLOW}üìã Commandes utiles :${NC}"
echo -e "‚Ä¢ Voir les logs      : ${BLUE}docker-compose logs -f${NC}"
echo -e "‚Ä¢ Arr√™ter le syst√®me : ${BLUE}docker-compose down${NC}"
echo -e "‚Ä¢ Red√©marrer         : ${BLUE}docker-compose restart${NC}"
echo -e "‚Ä¢ √âtat des services  : ${BLUE}docker-compose ps${NC}"

echo -e "\n${YELLOW}üîç Monitoring :${NC}"
echo -e "‚Ä¢ Logs des agents    : ${BLUE}docker-compose logs -f master-agent${NC}"
echo -e "‚Ä¢ Logs de l'API      : ${BLUE}docker-compose logs -f api${NC}"
echo -e "‚Ä¢ Logs du frontend   : ${BLUE}docker-compose logs -f frontend${NC}"

echo -e "\n${GREEN}‚ö° Le syst√®me est maintenant pr√™t pour les forward tests !${NC}"
echo -e "${YELLOW}‚ö†Ô∏è Rappel : Ce syst√®me fonctionne uniquement avec un compte DEMO${NC}"

# Afficher les logs en temps r√©el
echo -e "\n${BLUE}üìú Logs en temps r√©el (Ctrl+C pour arr√™ter) :${NC}"
docker-compose logs -f 